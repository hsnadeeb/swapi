{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HasanAdeeb\\\\Desktop\\\\React\\\\swapi\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MoviesList from './components/MoviesList';\nimport Form from './components/Form';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [retryTimeout, setRetryTimeout] = useState(null);\n  useEffect(() => {\n    if (errorMessage) {\n      const timeout = setTimeout(fetchMoviesHandler, 5000);\n      setRetryTimeout(timeout);\n    } else {\n      if (retryTimeout) {\n        clearTimeout(retryTimeout);\n        setRetryTimeout(null);\n      }\n    }\n  }, [errorMessage]);\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setErrorMessage(null);\n    try {\n      const response = await fetch('https://react-swapi-9c359-default-rtdb.firebaseio.com/movies.json');\n      if (!response.ok) {\n        throw new Error(\"Something went wrong ... Retrying\");\n      }\n      const data = await response.json();\n      const transformMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformMovies);\n      setIsLoading(false);\n    } catch (error) {\n      setErrorMessage(error.message);\n      setIsLoading(false);\n    }\n  }\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, []);\n  async function addMovieHandler(movie) {\n    try {\n      const response = await fetch('https://react-swapi-9c359-default-rtdb.firebaseio.com/movies.json', {\n        method: 'POST',\n        body: JSON.stringify(movie),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to post data to Firebase');\n      }\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  function cancelRetryHandler() {\n    if (retryTimeout) {\n      clearTimeout(retryTimeout);\n      setRetryTimeout(null);\n      setErrorMessage(null);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        onAddMovie: addMovieHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...:-)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 23\n      }, this), !isLoading && errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [errorMessage, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: cancelRetryHandler,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), !isLoading && !errorMessage && movies.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 64\n      }, this), !isLoading && !errorMessage && /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UOFZHUMSDNP3KiHC/bQ1cxXS/5c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MoviesList","Form","jsxDEV","_jsxDEV","App","_s","movies","setMovies","isLoading","setIsLoading","errorMessage","setErrorMessage","retryTimeout","setRetryTimeout","timeout","setTimeout","fetchMoviesHandler","clearTimeout","response","fetch","ok","Error","data","json","transformMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","error","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","cancelRetryHandler","Fragment","children","onAddMovie","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","_c","$RefreshReg$"],"sources":["C:/Users/HasanAdeeb/Desktop/React/swapi/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MoviesList from './components/MoviesList';\nimport Form from './components/Form';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [retryTimeout, setRetryTimeout] = useState(null);\n\n  useEffect(() => {\n    if (errorMessage) {\n      const timeout = setTimeout(fetchMoviesHandler, 5000);\n      setRetryTimeout(timeout);\n    } else {\n      if (retryTimeout) {\n        clearTimeout(retryTimeout);\n        setRetryTimeout(null);\n      }\n    }\n  }, [errorMessage]);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setErrorMessage(null);\n\n    try {\n      const response = await fetch('https://react-swapi-9c359-default-rtdb.firebaseio.com/movies.json');\n      if (!response.ok) {\n        throw new Error(\"Something went wrong ... Retrying\");\n      }\n      const data = await response.json();\n\n      const transformMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n\n      setMovies(transformMovies);\n      setIsLoading(false);\n    } catch (error) {\n      setErrorMessage(error.message);\n      setIsLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    fetchMoviesHandler(); \n  }, []);\n\n  async function addMovieHandler(movie) {\n    try {\n      const response = await fetch('https://react-swapi-9c359-default-rtdb.firebaseio.com/movies.json', {\n        method: 'POST',\n        body: JSON.stringify(movie),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to post data to Firebase');\n      }\n  \n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  function cancelRetryHandler() {\n    if (retryTimeout) {\n      clearTimeout(retryTimeout);\n      setRetryTimeout(null);\n      setErrorMessage(null); \n    }\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <Form onAddMovie={addMovieHandler} />\n        \n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {isLoading && <p>Loading...:-)</p>}\n        {!isLoading && errorMessage && (\n          <p>\n            {errorMessage}\n            <button onClick={cancelRetryHandler}>Cancel</button>\n          </p>\n        )}\n        {!isLoading && !errorMessage && movies.length === 0 && <p>No Movies</p>}\n        {!isLoading && !errorMessage && <MoviesList movies={movies} />}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}