{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HasanAdeeb\\\\Desktop\\\\React\\\\swapi\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [retryInterval, setRetryInterval] = useState(null);\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setErrorMessage(null);\n    const maxRetries = 5; // Maximum number of retries\n    let retries = 0;\n    let cancelRetrying = false;\n    while (retries < maxRetries) {\n      try {\n        if (cancelRetrying) {\n          setIsLoading(false);\n          return;\n        }\n        const response = await fetch('https://swapi.dev/api/film/');\n        if (!response.ok) {\n          throw new Error(\"Something went wrong. Retrying...\");\n        }\n        const data = await response.json();\n        const transformMovies = data.results.map(movieData => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date\n          };\n        });\n        setMovies(transformMovies);\n        setIsLoading(false);\n        return;\n      } catch (error) {\n        setErrorMessage(error.message);\n        retries++;\n        await new Promise(resolve => setTimeout(resolve, 5000)); // Wait for 5 seconds before retrying\n      }\n    }\n\n    setIsLoading(false);\n  }\n  function cancelRetryHandler() {\n    if (retryInterval) {\n      clearInterval(retryInterval);\n      setRetryInterval(null);\n    }\n  }\n  useEffect(() => {\n    if (!retryInterval) {\n      fetchMoviesHandler(); // Initial API request\n      const interval = setInterval(fetchMoviesHandler, 5000); // Retry every 5 seconds\n      setRetryInterval(interval);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: cancelRetryHandler,\n        children: \"Cancel Retrying\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...:-)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 23\n      }, this), !isLoading && errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 40\n      }, this), !isLoading && !errorMessage && movies.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 64\n      }, this), !isLoading && !errorMessage && /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RcowMg6D6swLafmJUJR9nsfpJH4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MoviesList","jsxDEV","_jsxDEV","App","_s","movies","setMovies","isLoading","setIsLoading","errorMessage","setErrorMessage","retryInterval","setRetryInterval","fetchMoviesHandler","maxRetries","retries","cancelRetrying","response","fetch","ok","Error","data","json","transformMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","error","message","Promise","resolve","setTimeout","cancelRetryHandler","clearInterval","interval","setInterval","Fragment","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["C:/Users/HasanAdeeb/Desktop/React/swapi/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [retryInterval, setRetryInterval] = useState(null);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setErrorMessage(null);\n\n    const maxRetries = 5; // Maximum number of retries\n    let retries = 0;\n    let cancelRetrying = false;\n\n    while (retries < maxRetries) {\n      try {\n        if (cancelRetrying) {\n          setIsLoading(false);\n          return;\n        }\n\n        const response = await fetch('https://swapi.dev/api/film/');\n        if (!response.ok) {\n          throw new Error(\"Something went wrong. Retrying...\");\n        }\n        const data = await response.json();\n\n        const transformMovies = data.results.map((movieData) => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date,\n          };\n        });\n\n        setMovies(transformMovies);\n        setIsLoading(false);\n        return;\n      } catch (error) {\n        setErrorMessage(error.message);\n        retries++;\n        await new Promise(resolve => setTimeout(resolve, 5000)); // Wait for 5 seconds before retrying\n      }\n    }\n\n    setIsLoading(false);\n  }\n\n  function cancelRetryHandler() {\n    if (retryInterval) {\n      clearInterval(retryInterval);\n      setRetryInterval(null);\n    }\n  }\n\n  useEffect(() => {\n    if (!retryInterval) {\n      fetchMoviesHandler(); // Initial API request\n      const interval = setInterval(fetchMoviesHandler, 5000); // Retry every 5 seconds\n      setRetryInterval(interval);\n    }\n  }, []);\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={cancelRetryHandler}>Cancel Retrying</button>\n      </section>\n      <section>\n        {isLoading && <p>Loading...:-)</p>}\n        {!isLoading && errorMessage && <p>Error: {errorMessage}</p>}\n        {!isLoading && !errorMessage && movies.length === 0 && <p>No Movies</p>}\n        {!isLoading && !errorMessage && <MoviesList movies={movies} />}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}