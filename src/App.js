import React, { useState, useEffect } from 'react';
import MoviesList from './components/MoviesList';
import Form from './components/Form';
import './App.css';

function App() {
  const [movies, setMovies] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState(null);
  const [retryTimeout, setRetryTimeout] = useState(null);

  useEffect(() => {
    if (errorMessage) {
      const timeout = setTimeout(fetchMoviesHandler, 5000);
      setRetryTimeout(timeout);
    } else {
      if (retryTimeout) {
        clearTimeout(retryTimeout);
        setRetryTimeout(null);
      }
    }
  }, [errorMessage]);

  async function fetchMoviesHandler() {
    setIsLoading(true);
    setErrorMessage(null);

    try {
      const response = await fetch('https://react-swapi-9c359-default-rtdb.firebaseio.com/movies.json');
      if (!response.ok) {
        throw new Error("Something went wrong ... Retrying");
      }
      const data = await response.json();
      const loadedMovies=[];
      for(const key in data){
        loadedMovies.push({
          id:key,
          title: data[key].title,
          openingText: data[key].openingText,
          releaseDate: data[key].releaseDate,
        })
      }

      // const transformMovies = data.map((movieData) => {
      //   return {
      //     id: movieData.episode_id,
      //     title: movieData.title,
      //     openingText: movieData.opening_crawl,
      //     releaseDate: movieData.release_date,
      //   };
      // });

      setMovies(loadedMovies);
      setIsLoading(false);
    } catch (error) {
      setErrorMessage(error.message);
      setIsLoading(false);
    }
  }

  useEffect(() => {
    fetchMoviesHandler(); 
  }, []);

  async function addMovieHandler(movie) {
    console.log('Sending data to Firebase:', JSON.stringify(movie));
    try {
      const response = await fetch('https://react-swapi-9c359-default-rtdb.firebaseio.com/movies.json', {
        method: 'POST',
        body: JSON.stringify(movie),
        headers: {
          'Content-Type': 'application/json'
        }
      });
  
      if (!response.ok) {
        throw new Error('Failed to post data to Firebase');
      }
  
      const data = await response.json();
      
      setMovies((prevMovies) => [
        ...prevMovies,
        {
          id: data.name, // Use the ID generated by Firebase
          title: movie.title,
          openingText: movie.openingText,
          releaseDate: movie.releaseDate,
        },
      ]);

      console.log(data);
    } catch (error) {
      console.error(error);
    }
  }

  async function deleteMovieHandler(movieId) {
    try {
      const response = await fetch(
        `https://react-swapi-9c359-default-rtdb.firebaseio.com/movies/${movieId}.json`,
        {
          method: 'DELETE',
        }
      );

      if (!response.ok) {
        throw new Error('Failed to delete movie from Firebase');
      }

      // Update the UI by filtering out the deleted movie
      setMovies((prevMovies) => prevMovies.filter((movie) => movie.id !== movieId));
    } catch (error) {
      console.error(error);
    }
  }

  function cancelRetryHandler() {
    if (retryTimeout) {
      clearTimeout(retryTimeout);
      setRetryTimeout(null);
      setErrorMessage(null); 
    }
  }

  return (
    <React.Fragment>
      <section>
        <Form onAddMovie={addMovieHandler} />
        
        <button onClick={fetchMoviesHandler}>Fetch Movies</button>
      </section>
      <section>
        {isLoading && <p>Loading...:-)</p>}
        {!isLoading && errorMessage && (
          <p>
            {errorMessage}
            <button onClick={cancelRetryHandler}>Cancel</button>
          </p>
        )}
        {!isLoading && !errorMessage && movies.length === 0 && <p>No Movies</p>}
        {!isLoading && !errorMessage && <MoviesList movies={movies} onDeleteMovie={deleteMovieHandler}  />}
      </section>
    </React.Fragment>
  );
}

export default App;
